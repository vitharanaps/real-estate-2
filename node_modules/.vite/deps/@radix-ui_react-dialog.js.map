{
  "version": 3,
  "sources": ["../../@radix-ui/react-presence/dist/packages/react/presence/src/index.ts", "../../@radix-ui/react-presence/dist/packages/react/presence/src/Presence.tsx", "../../@radix-ui/react-presence/dist/packages/react/presence/src/useStateMachine.tsx", "../../@radix-ui/react-dialog/dist/packages/react/dialog/src/index.ts", "../../@radix-ui/react-dialog/dist/packages/react/dialog/src/Dialog.tsx"],
  "sourcesContent": ["export { Presence } from './Presence';\nexport type { PresenceProps } from './Presence';\n", "import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useStateMachine } from './useStateMachine';\n\ninterface PresenceProps {\n  children: React.ReactElement | ((props: { present: boolean }) => React.ReactElement);\n  present: boolean;\n}\n\nconst Presence: React.FC<PresenceProps> = (props) => {\n  const { present, children } = props;\n  const presence = usePresence(present);\n\n  const child = (\n    typeof children === 'function'\n      ? children({ present: presence.isPresent })\n      : React.Children.only(children)\n  ) as React.ReactElement;\n\n  const ref = useComposedRefs(presence.ref, (child as any).ref);\n  const forceMount = typeof children === 'function';\n  return forceMount || presence.isPresent ? React.cloneElement(child, { ref }) : null;\n};\n\nPresence.displayName = 'Presence';\n\n/* -------------------------------------------------------------------------------------------------\n * usePresence\n * -----------------------------------------------------------------------------------------------*/\n\nfunction usePresence(present: boolean) {\n  const [node, setNode] = React.useState<HTMLElement>();\n  const stylesRef = React.useRef<CSSStyleDeclaration>({} as any);\n  const prevPresentRef = React.useRef(present);\n  const prevAnimationNameRef = React.useRef<string>('none');\n  const initialState = present ? 'mounted' : 'unmounted';\n  const [state, send] = useStateMachine(initialState, {\n    mounted: {\n      UNMOUNT: 'unmounted',\n      ANIMATION_OUT: 'unmountSuspended',\n    },\n    unmountSuspended: {\n      MOUNT: 'mounted',\n      ANIMATION_END: 'unmounted',\n    },\n    unmounted: {\n      MOUNT: 'mounted',\n    },\n  });\n\n  React.useEffect(() => {\n    const currentAnimationName = getAnimationName(stylesRef.current);\n    prevAnimationNameRef.current = state === 'mounted' ? currentAnimationName : 'none';\n  }, [state]);\n\n  useLayoutEffect(() => {\n    const styles = stylesRef.current;\n    const wasPresent = prevPresentRef.current;\n    const hasPresentChanged = wasPresent !== present;\n\n    if (hasPresentChanged) {\n      const prevAnimationName = prevAnimationNameRef.current;\n      const currentAnimationName = getAnimationName(styles);\n\n      if (present) {\n        send('MOUNT');\n      } else if (currentAnimationName === 'none' || styles?.display === 'none') {\n        // If there is no exit animation or the element is hidden, animations won't run\n        // so we unmount instantly\n        send('UNMOUNT');\n      } else {\n        /**\n         * When `present` changes to `false`, we check changes to animation-name to\n         * determine whether an animation has started. We chose this approach (reading\n         * computed styles) because there is no `animationrun` event and `animationstart`\n         * fires after `animation-delay` has expired which would be too late.\n         */\n        const isAnimating = prevAnimationName !== currentAnimationName;\n\n        if (wasPresent && isAnimating) {\n          send('ANIMATION_OUT');\n        } else {\n          send('UNMOUNT');\n        }\n      }\n\n      prevPresentRef.current = present;\n    }\n  }, [present, send]);\n\n  useLayoutEffect(() => {\n    if (node) {\n      /**\n       * Triggering an ANIMATION_OUT during an ANIMATION_IN will fire an `animationcancel`\n       * event for ANIMATION_IN after we have entered `unmountSuspended` state. So, we\n       * make sure we only trigger ANIMATION_END for the currently active animation.\n       */\n      const handleAnimationEnd = (event: AnimationEvent) => {\n        const currentAnimationName = getAnimationName(stylesRef.current);\n        const isCurrentAnimation = currentAnimationName.includes(event.animationName);\n        if (event.target === node && isCurrentAnimation) {\n          // With React 18 concurrency this update is applied\n          // a frame after the animation ends, creating a flash of visible content.\n          // By manually flushing we ensure they sync within a frame, removing the flash.\n          ReactDOM.flushSync(() => send('ANIMATION_END'));\n        }\n      };\n      const handleAnimationStart = (event: AnimationEvent) => {\n        if (event.target === node) {\n          // if animation occurred, store its name as the previous animation.\n          prevAnimationNameRef.current = getAnimationName(stylesRef.current);\n        }\n      };\n      node.addEventListener('animationstart', handleAnimationStart);\n      node.addEventListener('animationcancel', handleAnimationEnd);\n      node.addEventListener('animationend', handleAnimationEnd);\n      return () => {\n        node.removeEventListener('animationstart', handleAnimationStart);\n        node.removeEventListener('animationcancel', handleAnimationEnd);\n        node.removeEventListener('animationend', handleAnimationEnd);\n      };\n    } else {\n      // Transition to the unmounted state if the node is removed prematurely.\n      // We avoid doing so during cleanup as the node may change but still exist.\n      send('ANIMATION_END');\n    }\n  }, [node, send]);\n\n  return {\n    isPresent: ['mounted', 'unmountSuspended'].includes(state),\n    ref: React.useCallback((node: HTMLElement) => {\n      if (node) stylesRef.current = getComputedStyle(node);\n      setNode(node);\n    }, []),\n  };\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getAnimationName(styles?: CSSStyleDeclaration) {\n  return styles?.animationName || 'none';\n}\n\nexport { Presence };\nexport type { PresenceProps };\n", "import * as React from 'react';\n\ntype Machine<S> = { [k: string]: { [k: string]: S } };\ntype MachineState<T> = keyof T;\ntype MachineEvent<T> = keyof UnionToIntersection<T[keyof T]>;\n\n// ðŸ¤¯ https://fettblog.eu/typescript-union-to-intersection/\ntype UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any\n  ? R\n  : never;\n\nexport function useStateMachine<M>(\n  initialState: MachineState<M>,\n  machine: M & Machine<MachineState<M>>\n) {\n  return React.useReducer((state: MachineState<M>, event: MachineEvent<M>): MachineState<M> => {\n    const nextState = (machine[state] as any)[event];\n    return nextState ?? state;\n  }, initialState);\n}\n", "export {\n  createDialogScope,\n  //\n  Dialog,\n  DialogTrigger,\n  DialogPortal,\n  DialogOverlay,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Title,\n  Description,\n  Close,\n  //\n  WarningProvider,\n} from './Dialog';\nexport type {\n  DialogProps,\n  DialogTriggerProps,\n  DialogPortalProps,\n  DialogOverlayProps,\n  DialogContentProps,\n  DialogTitleProps,\n  DialogDescriptionProps,\n  DialogCloseProps,\n} from './Dialog';\n", "import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext, createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { hideOthers } from 'aria-hidden';\nimport { Slot } from '@radix-ui/react-slot';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Dialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst DIALOG_NAME = 'Dialog';\n\ntype ScopedProps<P> = P & { __scopeDialog?: Scope };\nconst [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\n\ntype DialogContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  contentRef: React.RefObject<DialogContentElement>;\n  contentId: string;\n  titleId: string;\n  descriptionId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal: boolean;\n};\n\nconst [DialogProvider, useDialogContext] = createDialogContext<DialogContextValue>(DIALOG_NAME);\n\ninterface DialogProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n}\n\nconst Dialog: React.FC<DialogProps> = (props: ScopedProps<DialogProps>) => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true,\n  } = props;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const contentRef = React.useRef<DialogContentElement>(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <DialogProvider\n      scope={__scopeDialog}\n      triggerRef={triggerRef}\n      contentRef={contentRef}\n      contentId={useId()}\n      titleId={useId()}\n      descriptionId={useId()}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      modal={modal}\n    >\n      {children}\n    </DialogProvider>\n  );\n};\n\nDialog.displayName = DIALOG_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DialogTrigger';\n\ntype DialogTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface DialogTriggerProps extends PrimitiveButtonProps {}\n\nconst DialogTrigger = React.forwardRef<DialogTriggerElement, DialogTriggerProps>(\n  (props: ScopedProps<DialogTriggerProps>, forwardedRef) => {\n    const { __scopeDialog, ...triggerProps } = props;\n    const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={context.open}\n        aria-controls={context.contentId}\n        data-state={getState(context.open)}\n        {...triggerProps}\n        ref={composedTriggerRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'DialogPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createDialogContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface DialogPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogPortal: React.FC<DialogPortalProps> = (props: ScopedProps<DialogPortalProps>) => {\n  const { __scopeDialog, forceMount, children, container } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return (\n    <PortalProvider scope={__scopeDialog} forceMount={forceMount}>\n      {React.Children.map(children, (child) => (\n        <Presence present={forceMount || context.open}>\n          <PortalPrimitive asChild container={container}>\n            {child}\n          </PortalPrimitive>\n        </Presence>\n      ))}\n    </PortalProvider>\n  );\n};\n\nDialogPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'DialogOverlay';\n\ntype DialogOverlayElement = DialogOverlayImplElement;\ninterface DialogOverlayProps extends DialogOverlayImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogOverlay = React.forwardRef<DialogOverlayElement, DialogOverlayProps>(\n  (props: ScopedProps<DialogOverlayProps>, forwardedRef) => {\n    const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n    return context.modal ? (\n      <Presence present={forceMount || context.open}>\n        <DialogOverlayImpl {...overlayProps} ref={forwardedRef} />\n      </Presence>\n    ) : null;\n  }\n);\n\nDialogOverlay.displayName = OVERLAY_NAME;\n\ntype DialogOverlayImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DialogOverlayImplProps extends PrimitiveDivProps {}\n\nconst DialogOverlayImpl = React.forwardRef<DialogOverlayImplElement, DialogOverlayImplProps>(\n  (props: ScopedProps<DialogOverlayImplProps>, forwardedRef) => {\n    const { __scopeDialog, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n    return (\n      // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n      // ie. when `Overlay` and `Content` are siblings\n      <RemoveScroll as={Slot} allowPinchZoom shards={[context.contentRef]}>\n        <Primitive.div\n          data-state={getState(context.open)}\n          {...overlayProps}\n          ref={forwardedRef}\n          // We re-enable pointer-events prevented by `Dialog.Content` to allow scrolling the overlay.\n          style={{ pointerEvents: 'auto', ...overlayProps.style }}\n        />\n      </RemoveScroll>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DialogContent';\n\ntype DialogContentElement = DialogContentTypeElement;\ninterface DialogContentProps extends DialogContentTypeProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogContent = React.forwardRef<DialogContentElement, DialogContentProps>(\n  (props: ScopedProps<DialogContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.modal ? (\n          <DialogContentModal {...contentProps} ref={forwardedRef} />\n        ) : (\n          <DialogContentNonModal {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nDialogContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentTypeElement = DialogContentImplElement;\ninterface DialogContentTypeProps\n  extends Omit<DialogContentImplProps, 'trapFocus' | 'disableOutsidePointerEvents'> {}\n\nconst DialogContentModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      const content = contentRef.current;\n      if (content) return hideOthers(content);\n    }, []);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={composedRefs}\n        // we make sure focus isn't trapped once `DialogContent` has been closed\n        // (closed !== unmounted when animating out)\n        trapFocus={context.open}\n        disableOutsidePointerEvents\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          event.preventDefault();\n          context.triggerRef.current?.focus();\n        })}\n        onPointerDownOutside={composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const originalEvent = event.detail.originalEvent;\n          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n          // If the event is a right-click, we shouldn't close because\n          // it is effectively as if we right-clicked the `Overlay`.\n          if (isRightClick) event.preventDefault();\n        })}\n        // When focus is trapped, a `focusout` event may still happen.\n        // We make sure we don't trigger our `onDismiss` in such case.\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) =>\n          event.preventDefault()\n        )}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst DialogContentNonModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const hasInteractedOutsideRef = React.useRef(false);\n    const hasPointerDownOutsideRef = React.useRef(false);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={forwardedRef}\n        trapFocus={false}\n        disableOutsidePointerEvents={false}\n        onCloseAutoFocus={(event) => {\n          props.onCloseAutoFocus?.(event);\n\n          if (!event.defaultPrevented) {\n            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n            // Always prevent auto focus because we either focus manually or want user agent focus\n            event.preventDefault();\n          }\n\n          hasInteractedOutsideRef.current = false;\n          hasPointerDownOutsideRef.current = false;\n        }}\n        onInteractOutside={(event) => {\n          props.onInteractOutside?.(event);\n\n          if (!event.defaultPrevented) {\n            hasInteractedOutsideRef.current = true;\n            if (event.detail.originalEvent.type === 'pointerdown') {\n              hasPointerDownOutsideRef.current = true;\n            }\n          }\n\n          // Prevent dismissing when clicking the trigger.\n          // As the trigger is already setup to close, without doing so would\n          // cause it to close and immediately open.\n          const target = event.target as HTMLElement;\n          const targetIsTrigger = context.triggerRef.current?.contains(target);\n          if (targetIsTrigger) event.preventDefault();\n\n          // On Safari if the trigger is inside a container with tabIndex={0}, when clicked\n          // we will get the pointer down outside event on the trigger, but then a subsequent\n          // focus outside event on the container, we ignore any focus outside event when we've\n          // already had a pointer down outside event.\n          if (event.detail.originalEvent.type === 'focusin' && hasPointerDownOutsideRef.current) {\n            event.preventDefault();\n          }\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentImplElement = React.ElementRef<typeof DismissableLayer>;\ntype DismissableLayerProps = Radix.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = Radix.ComponentPropsWithoutRef<typeof FocusScope>;\ninterface DialogContentImplProps extends Omit<DismissableLayerProps, 'onDismiss'> {\n  /**\n   * When `true`, focus cannot escape the `Content` via keyboard,\n   * pointer, or a programmatic focus.\n   * @defaultValue false\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n\n  /**\n   * Event handler called when auto-focusing on open.\n   * Can be prevented.\n   */\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst DialogContentImpl = React.forwardRef<DialogContentImplElement, DialogContentImplProps>(\n  (props: ScopedProps<DialogContentImplProps>, forwardedRef) => {\n    const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n\n    // Make sure the whole tree has focus guards as our `Dialog` will be\n    // the last element in the DOM (beacuse of the `Portal`)\n    useFocusGuards();\n\n    return (\n      <>\n        <FocusScope\n          asChild\n          loop\n          trapped={trapFocus}\n          onMountAutoFocus={onOpenAutoFocus}\n          onUnmountAutoFocus={onCloseAutoFocus}\n        >\n          <DismissableLayer\n            role=\"dialog\"\n            id={context.contentId}\n            aria-describedby={context.descriptionId}\n            aria-labelledby={context.titleId}\n            data-state={getState(context.open)}\n            {...contentProps}\n            ref={composedRefs}\n            onDismiss={() => context.onOpenChange(false)}\n          />\n        </FocusScope>\n        {process.env.NODE_ENV !== 'production' && (\n          <>\n            <TitleWarning titleId={context.titleId} />\n            <DescriptionWarning contentRef={contentRef} descriptionId={context.descriptionId} />\n          </>\n        )}\n      </>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'DialogTitle';\n\ntype DialogTitleElement = React.ElementRef<typeof Primitive.h2>;\ntype PrimitiveHeading2Props = Radix.ComponentPropsWithoutRef<typeof Primitive.h2>;\ninterface DialogTitleProps extends PrimitiveHeading2Props {}\n\nconst DialogTitle = React.forwardRef<DialogTitleElement, DialogTitleProps>(\n  (props: ScopedProps<DialogTitleProps>, forwardedRef) => {\n    const { __scopeDialog, ...titleProps } = props;\n    const context = useDialogContext(TITLE_NAME, __scopeDialog);\n    return <Primitive.h2 id={context.titleId} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'DialogDescription';\n\ntype DialogDescriptionElement = React.ElementRef<typeof Primitive.p>;\ntype PrimitiveParagraphProps = Radix.ComponentPropsWithoutRef<typeof Primitive.p>;\ninterface DialogDescriptionProps extends PrimitiveParagraphProps {}\n\nconst DialogDescription = React.forwardRef<DialogDescriptionElement, DialogDescriptionProps>(\n  (props: ScopedProps<DialogDescriptionProps>, forwardedRef) => {\n    const { __scopeDialog, ...descriptionProps } = props;\n    const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n    return <Primitive.p id={context.descriptionId} {...descriptionProps} ref={forwardedRef} />;\n  }\n);\n\nDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'DialogClose';\n\ntype DialogCloseElement = React.ElementRef<typeof Primitive.button>;\ninterface DialogCloseProps extends PrimitiveButtonProps {}\n\nconst DialogClose = React.forwardRef<DialogCloseElement, DialogCloseProps>(\n  (props: ScopedProps<DialogCloseProps>, forwardedRef) => {\n    const { __scopeDialog, ...closeProps } = props;\n    const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n    return (\n      <Primitive.button\n        type=\"button\"\n        {...closeProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n      />\n    );\n  }\n);\n\nDialogClose.displayName = CLOSE_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst TITLE_WARNING_NAME = 'DialogTitleWarning';\n\nconst [WarningProvider, useWarningContext] = createContext(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: 'dialog',\n});\n\ntype TitleWarningProps = { titleId?: string };\n\nconst TitleWarning: React.FC<TitleWarningProps> = ({ titleId }) => {\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n\n  const MESSAGE = `\\`${titleWarningContext.contentName}\\` requires a \\`${titleWarningContext.titleName}\\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \\`${titleWarningContext.titleName}\\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;\n\n  React.useEffect(() => {\n    if (titleId) {\n      const hasTitle = document.getElementById(titleId);\n      if (!hasTitle) throw new Error(MESSAGE);\n    }\n  }, [MESSAGE, titleId]);\n\n  return null;\n};\n\nconst DESCRIPTION_WARNING_NAME = 'DialogDescriptionWarning';\n\ntype DescriptionWarningProps = {\n  contentRef: React.RefObject<DialogContentElement>;\n  descriptionId?: string;\n};\n\nconst DescriptionWarning: React.FC<DescriptionWarningProps> = ({ contentRef, descriptionId }) => {\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n  const MESSAGE = `Warning: Missing \\`Description\\` or \\`aria-describedby={undefined}\\` for {${descriptionWarningContext.contentName}}.`;\n\n  React.useEffect(() => {\n    const describedById = contentRef.current?.getAttribute('aria-describedby');\n    // if we have an id and the user hasn't set aria-describedby={undefined}\n    if (descriptionId && describedById) {\n      const hasDescription = document.getElementById(descriptionId);\n      if (!hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef, descriptionId]);\n\n  return null;\n};\n\nconst Root = Dialog;\nconst Trigger = DialogTrigger;\nconst Portal = DialogPortal;\nconst Overlay = DialogOverlay;\nconst Content = DialogContent;\nconst Title = DialogTitle;\nconst Description = DialogDescription;\nconst Close = DialogClose;\n\nexport {\n  createDialogScope,\n  //\n  Dialog,\n  DialogTrigger,\n  DialogPortal,\n  DialogOverlay,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Title,\n  Description,\n  Close,\n  //\n  WarningProvider,\n};\nexport type {\n  DialogProps,\n  DialogTriggerProps,\n  DialogPortalProps,\n  DialogOverlayProps,\n  DialogContentProps,\n  DialogTitleProps,\n  DialogDescriptionProps,\n  DialogCloseProps,\n};\n"],
  "mappings": "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",
  "names": ["useStateMachine", "initialState", "machine", "React", "state", "event", "nextState", "Presence", "props", "children", "presence", "usePresence", "present", "child", "isPresent", "only", "ref", "useComposedRefs", "forceMount", "displayName", "node", "setNode", "stylesRef", "prevPresentRef", "prevAnimationNameRef", "send", "mounted", "UNMOUNT", "ANIMATION_OUT", "unmountSuspended", "MOUNT", "ANIMATION_END", "unmounted", "currentAnimationName", "getAnimationName", "current", "useLayoutEffect", "styles", "wasPresent", "hasPresentChanged", "prevAnimationName", "display", "isAnimating", "handleAnimationEnd", "isCurrentAnimation", "includes", "animationName", "target", "ReactDOM", "handleAnimationStart", "addEventListener", "removeEventListener", "getComputedStyle", "DIALOG_NAME", "createDialogContext", "createDialogScope", "createContextScope", "DialogProvider", "useDialogContext", "Dialog", "props", "open", "openProp", "modal", "triggerRef", "React", "contentRef", "setOpen", "useControllableState", "prop", "defaultProp", "defaultOpen", "onChange", "onOpenChange", "$67UHm$createElement", "__scopeDialog", "useId", "prevOpen", "children", "TRIGGER_NAME", "DialogTrigger", "forwardedRef", "triggerProps", "context", "composedTriggerRef", "useComposedRefs", "contentId", "getState", "composeEventHandlers", "onClick", "onOpenToggle", "PORTAL_NAME", "PortalProvider", "usePortalContext", "forceMount", "undefined", "DialogPortal", "container", "map", "child", "OVERLAY_NAME", "DialogOverlay", "portalContext", "overlayProps", "DialogOverlayImpl", "Slot", "pointerEvents", "style", "CONTENT_NAME", "DialogContent", "contentProps", "DialogContentModal", "composedRefs", "content", "current", "hideOthers", "onCloseAutoFocus", "event", "preventDefault", "focus", "onPointerDownOutside", "originalEvent", "detail", "ctrlLeftClick", "button", "ctrlKey", "isRightClick", "onFocusOutside", "DialogContentNonModal", "hasInteractedOutsideRef", "hasPointerDownOutsideRef", "defaultPrevented", "onInteractOutside", "type", "target", "targetIsTrigger", "contains", "DialogContentImpl", "useFocusGuards", "$67UHm$Fragment", "trapFocus", "onOpenAutoFocus", "descriptionId", "titleId", "process", "TITLE_NAME", "DialogTitle", "titleProps", "DESCRIPTION_NAME", "DialogDescription", "descriptionProps", "CLOSE_NAME", "DialogClose", "closeProps", "TITLE_WARNING_NAME", "WarningProvider", "useWarningContext", "createContext", "contentName", "titleName", "docsSlug", "Root", "Dialog", "Trigger", "DialogTrigger", "Portal", "DialogPortal", "Overlay", "DialogOverlay", "Content", "DialogContent", "Title", "DialogTitle", "Description", "DialogDescription", "Close", "DialogClose"]
}
